// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: api/rate_limiter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RateLimiterService_Allow_FullMethodName                 = "/rate_limiter.RateLimiterService/Allow"
	RateLimiterService_ResetBucket_FullMethodName           = "/rate_limiter.RateLimiterService/ResetBucket"
	RateLimiterService_AddIPToBlackList_FullMethodName      = "/rate_limiter.RateLimiterService/AddIPToBlackList"
	RateLimiterService_RemoveIPFromBlackList_FullMethodName = "/rate_limiter.RateLimiterService/RemoveIPFromBlackList"
	RateLimiterService_AddIPToWhiteList_FullMethodName      = "/rate_limiter.RateLimiterService/AddIPToWhiteList"
	RateLimiterService_RemoveIPFromWhiteList_FullMethodName = "/rate_limiter.RateLimiterService/RemoveIPFromWhiteList"
)

// RateLimiterServiceClient is the client API for RateLimiterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimiterServiceClient interface {
	Allow(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ResetBucket(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddIPToBlackList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveIPFromBlackList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddIPToWhiteList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveIPFromWhiteList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rateLimiterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterServiceClient(cc grpc.ClientConnInterface) RateLimiterServiceClient {
	return &rateLimiterServiceClient{cc}
}

func (c *rateLimiterServiceClient) Allow(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, RateLimiterService_Allow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) ResetBucket(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RateLimiterService_ResetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) AddIPToBlackList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RateLimiterService_AddIPToBlackList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) RemoveIPFromBlackList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RateLimiterService_RemoveIPFromBlackList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) AddIPToWhiteList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RateLimiterService_AddIPToWhiteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) RemoveIPFromWhiteList(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RateLimiterService_RemoveIPFromWhiteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServiceServer is the server API for RateLimiterService service.
// All implementations must embed UnimplementedRateLimiterServiceServer
// for forward compatibility.
type RateLimiterServiceServer interface {
	Allow(context.Context, *LoginRequest) (*LoginResponse, error)
	ResetBucket(context.Context, *ResetRequest) (*emptypb.Empty, error)
	AddIPToBlackList(context.Context, *IPRequest) (*emptypb.Empty, error)
	RemoveIPFromBlackList(context.Context, *IPRequest) (*emptypb.Empty, error)
	AddIPToWhiteList(context.Context, *IPRequest) (*emptypb.Empty, error)
	RemoveIPFromWhiteList(context.Context, *IPRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRateLimiterServiceServer()
}

// UnimplementedRateLimiterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRateLimiterServiceServer struct{}

func (UnimplementedRateLimiterServiceServer) Allow(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allow not implemented")
}
func (UnimplementedRateLimiterServiceServer) ResetBucket(context.Context, *ResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedRateLimiterServiceServer) AddIPToBlackList(context.Context, *IPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPToBlackList not implemented")
}
func (UnimplementedRateLimiterServiceServer) RemoveIPFromBlackList(context.Context, *IPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPFromBlackList not implemented")
}
func (UnimplementedRateLimiterServiceServer) AddIPToWhiteList(context.Context, *IPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPToWhiteList not implemented")
}
func (UnimplementedRateLimiterServiceServer) RemoveIPFromWhiteList(context.Context, *IPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPFromWhiteList not implemented")
}
func (UnimplementedRateLimiterServiceServer) mustEmbedUnimplementedRateLimiterServiceServer() {}
func (UnimplementedRateLimiterServiceServer) testEmbeddedByValue()                            {}

// UnsafeRateLimiterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServiceServer will
// result in compilation errors.
type UnsafeRateLimiterServiceServer interface {
	mustEmbedUnimplementedRateLimiterServiceServer()
}

func RegisterRateLimiterServiceServer(s grpc.ServiceRegistrar, srv RateLimiterServiceServer) {
	// If the following call pancis, it indicates UnimplementedRateLimiterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RateLimiterService_ServiceDesc, srv)
}

func _RateLimiterService_Allow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).Allow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_Allow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).Allow(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_ResetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).ResetBucket(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_AddIPToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).AddIPToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_AddIPToBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).AddIPToBlackList(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_RemoveIPFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).RemoveIPFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_RemoveIPFromBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).RemoveIPFromBlackList(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_AddIPToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).AddIPToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_AddIPToWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).AddIPToWhiteList(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_RemoveIPFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).RemoveIPFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiterService_RemoveIPFromWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).RemoveIPFromWhiteList(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimiterService_ServiceDesc is the grpc.ServiceDesc for RateLimiterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimiterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rate_limiter.RateLimiterService",
	HandlerType: (*RateLimiterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allow",
			Handler:    _RateLimiterService_Allow_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _RateLimiterService_ResetBucket_Handler,
		},
		{
			MethodName: "AddIPToBlackList",
			Handler:    _RateLimiterService_AddIPToBlackList_Handler,
		},
		{
			MethodName: "RemoveIPFromBlackList",
			Handler:    _RateLimiterService_RemoveIPFromBlackList_Handler,
		},
		{
			MethodName: "AddIPToWhiteList",
			Handler:    _RateLimiterService_AddIPToWhiteList_Handler,
		},
		{
			MethodName: "RemoveIPFromWhiteList",
			Handler:    _RateLimiterService_RemoveIPFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rate_limiter.proto",
}
